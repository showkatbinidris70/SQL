Quiz-1:
0. create user user100 and give grant dba, then connect and start 
working
Ans. conect sys as sysdba
password: sys
create user user100 identified by user100;
grant dba to user100;

1. Create table named department and employee.
 A. department: id PK, dep_name Unique
 C. employee: id, name, salary (starting salary more than 25000),
 joining_date (Before 2000), department_id FK Not null 
2. create 3 sequences for each table.
	A. department sequence should be incremented by 10 and start 
	with 10. 
	B. employee sequence should be incremented by 1.	
3. Create Trigger on employee table for insert, update and delete
4. Insert, update and delete data using procedure
5. create a view for employee table to display the following data:
emp ID, emp Name, Anual Salary, Department Name
6. create synonym for q. no 4

========================****************=============================


connect sys as sysdba

create user user100 identified by user100;
grant dba to user100;
grant all privileges to user100;
grant unlimited tablespace to user100;

connect user100;

create table department(id number(5) primary key, dep_name varchar2(50) unique);
create table employee(id number(5), name varchar2(50),salary number(7,2) check (salary > 25000),
join_date date check(join_date < '01-JAN-2000'),
department_id number(5) not null, foreign key(department_id) references department(id));

create sequence dep_seq increment by 10 start with 10 nocycle nocache;
create sequence emp_seq increment by 1 start with 101 nocache nocycle;

create table emp_backup as select * from employee;
create or replace trigger emp_after_insert after insert on employee
for each row
declare
begin
insert into emp_backup values(:new.id, :new.name, :new.salary, :new.join_date, :new.department_id);
dbms_output.put_line("Insert successfully");
end;
/
insert into employee values(emp_seq.nextval, 'Showkat', 30000, '05-MAR-1999',10);


create or replace trigger emp_after_update after update on employee
for each row
declare
begin
update emp_backup set name=:new.name where id=:old.id;
dbms_output.put_line("Insert successfully");
end;
/

update employee set name='Kashem' where id=10;

create or replace trigger emp_after_delete after delete on employee
for each row
declare
begin
delete from emp_backup where id=:old.id;
dbms_output.put_line("Insert successfully");
end;
/

delete from employee where id=10;

create or replace procedure insertdepartment(
e_id in employee.id%type,
e_name in employee.name%type)
is
begin
insert into department(id, name) values(e_id, e_name)
commit;
end;
/

begin
insertdepartment(emp_seq.nextval, 'Alamgir');
end;
/

create or replace procedure updatedepartment(
e_id in employee.id%type,
e_name in employee.name%type)
is
begin
update department set id=e_id, name=e_name where id=e_id;
commit;
is
end;
/

begin
updatedepartmentt(20, 'Kader');
end;
/

create or replace procedure deletedepartment(
e_id in employee.id%type,
e_name in employee.name%type)
is
begin
delete from department where id=e_id;;
commit;
end;
/

begin
deletedepartment(30);
end;
/

create view emp_seq_view as select e.id, e.name, e.salary *12 "Annual Salary" d.name from employee e, department d where e.department_id = d.id;);

create synonym emp_syn  for emp_view;






















